{
    "project": {
        "name": "The meteor-roles API",
        "description": "The meteor-roles API: an authorization package for Meteor",
        "version": "v1.2.14"
    },
    "files": {
        "roles/client/subscriptions.js": {
            "name": "roles/client/subscriptions.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Roles": 1
            },
            "namespaces": {}
        },
        "roles/client/uiHelpers.js": {
            "name": "roles/client/uiHelpers.js",
            "modules": {
                "UIHelpers": 1
            },
            "classes": {},
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {}
        },
        "roles/roles_common.js": {
            "name": "roles/roles_common.js",
            "modules": {
                "Roles": 1
            },
            "classes": {
                "Roles": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "roles/roles_server.js": {
            "name": "roles/roles_server.js",
            "modules": {},
            "classes": {},
            "fors": {
                "Roles": 1
            },
            "namespaces": {}
        }
    },
    "modules": {
        "UIHelpers": {
            "name": "UIHelpers",
            "submodules": {},
            "elements": {},
            "classes": {
                "UIHelpers": 1
            },
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "roles/client/uiHelpers.js",
            "line": 3,
            "description": "Convenience functions for use on client.\n\nNOTE: You must restrict user actions on the server-side; any\nclient-side checks are strictly for convenience and must not be\ntrusted."
        },
        "Roles": {
            "name": "Roles",
            "submodules": {},
            "elements": {},
            "classes": {
                "Roles": 1
            },
            "fors": {
                "Roles": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "roles/roles_common.js",
            "line": 29,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.\n\nIt uses `roles` field to `Meteor.users` documents which is an array of subdocuments with the following\nschema:\n - `_id`: role name\n - `partition`: partition name\n - `assigned`: boolean, if the role was manually assigned (set), or was automatically inferred (eg., subroles)\n\nRoles themselves are accessible throgh `Meteor.roles` collection and documents consist of:\n - `_id`: role name\n - `children`: list of subdocuments:\n   - `_id`\n\nChildren list elements are subdocuments so that they can be easier extended in the future or by plugins.\n\nRoles can have multiple parents and can be children (subroles) of multiple roles.\n\nExample: `{_id: \"admin\", children: [{_id: \"editor\"}]}`"
        }
    },
    "classes": {
        "Roles": {
            "name": "Roles",
            "shortname": "Roles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Roles",
            "file": "roles/roles_common.js",
            "line": 29
        },
        "UIHelpers": {
            "name": "UIHelpers",
            "shortname": "UIHelpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UIHelpers",
            "namespace": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "roles/client/subscriptions.js",
            "line": 3,
            "description": "Subscription handle for the collection of all existing roles.",
            "example": [
                "\n\n    Roles.subscription.ready(); // true if roles have been loaded"
            ],
            "itemtype": "property",
            "name": "subscription",
            "type": "Object",
            "static": 1,
            "class": "Roles"
        },
        {
            "file": "roles/client/uiHelpers.js",
            "line": 24,
            "description": "UI helper to check if current user is in at least one\nof the target roles.  For use in client-side templates.",
            "example": [
                "\n    {{#if isInRole 'admin'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user' 'partition1'}}\n    {{/if}}"
            ],
            "itemtype": "method",
            "name": "isInRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role or comma-seperated list of roles.",
                    "type": "String"
                },
                {
                    "name": "partition",
                    "description": "Optional, name of partition to check.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if current user is in at least one of the target roles.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "UIHelpers",
            "module": "UIHelpers"
        },
        {
            "file": "roles/roles_common.js",
            "line": 42,
            "description": "Used as a global group (now partition) name. Not used anymore.",
            "itemtype": "property",
            "name": "GLOBAL_GROUP",
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 51,
            "description": "Create a new role.",
            "itemtype": "method",
            "name": "createRole",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `unlessExists`: if `true`, exception will not be thrown in the role already exists",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "ID of the new role.",
                "type": "String"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 89,
            "description": "Delete an existing role.\n\nIf the role is set for any user, it is automatically unset.",
            "itemtype": "method",
            "name": "deleteRole",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 141,
            "description": "Add role parent to the role.\n\nPrevious parents are kept (role can have multiple parents). For users which have the\nparent role set, new subroles are added automatically.",
            "itemtype": "method",
            "name": "addRoleParent",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 229,
            "description": "Remove role parent from the role.\n\nOther parents are kept (role can have multiple parents). For users which have the\nparent role set, removed subrole is removed automatically.",
            "itemtype": "method",
            "name": "removeRoleParent",
            "params": [
                {
                    "name": "roleName",
                    "description": "Name of role.",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "Name of parent role.",
                    "type": "String"
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 295,
            "description": "Add users to roles.\n\nAdds roles to existing roles for each user.",
            "example": [
                "\n    Roles.addUsersToRoles(userId, 'admin')\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "addUsersToRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 350,
            "description": "Set users' roles.\n\nReplaces all existing roles with a new set of roles.",
            "example": [
                "\n    Roles.setUserRoles(userId, 'admin')\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n    Roles.setUserRoles([user1, user2], ['user','editor'])\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')"
            ],
            "itemtype": "method",
            "name": "setUserRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 417,
            "description": "Add one user to one role.",
            "itemtype": "method",
            "name": "_addUserToRole",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or object with an `_id` field.",
                    "type": "String|Object"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition, or `null` for the global role\n  - `ifExists`: if `true`, do not throw an exception if the role does not exist\n  - `_assigned`: internal option, should not be used publicly because it will break assumptions\n    in te code; publicly, you can only add users to an assigned role\n    should the role be set as assigned (`true`), `null` is the same as `false`,\n    only that it does not force the value to `false` if the role is already assigned",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Roles set during the call (even those already set).",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 537,
            "description": "Remove users from assigned roles.",
            "example": [
                "\n    Roles.removeUsersFromRoles(userId, 'admin')\n    Roles.removeUsersFromRoles([userId, user2], ['editor'])\n    Roles.removeUsersFromRoles(userId, ['user'], 'group1')"
            ],
            "itemtype": "method",
            "name": "removeUsersFromRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User ID(s) or object(s) with an `_id` field.",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to. Roles have to exist.",
                    "type": "Array|String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition, or `null` for the global role\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 590,
            "description": "Remove one user from one role.\n\nWARNING: It leaves user's roles in a possibly inconsistent state. Because we allow the same\nrole to be a child of multiple roles it might happen that it removes some subroles which\nit should not because they are in effect also through some other parent role. You should always\ncall `_assureConsistency` after you are finished with calls to `_removeUserFromRole` for a\nparticular user.",
            "itemtype": "method",
            "name": "_removeUserFromRole",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or object with an `_id` field.",
                    "type": "String|Object"
                },
                {
                    "name": "roleName",
                    "description": "Name of the role to add the user to. The role have to exist.",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition, or `null` for the global role\n  - `_assigned`: internal option, should not be used publicly because it will break assumptions\n    in te code; publicly, you can only remove users from an assigned role\n    if `true`, only manually assigned roles are removed, if `false`, only automatically\n    assigned roles are removed, if `null`, any role is removed",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 658,
            "description": "Makes sure all subroles are correctly set, and no extra subroles are set which should not be.\n\nUsed internally after complicated changes, but it can also be used whenever one feels that\nthere might be inconsistencies (eg., after a crash).\n\nWe simply re-set to the user their assigned roles again and remove any roles which\nare marked as not explicitly assigned, and have not been part of what we currently set.",
            "itemtype": "method",
            "name": "_assureConsistency",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 706,
            "description": "Check if user has specified roles.",
            "example": [
                "\n    // global roles\n    Roles.userIsInRole(user, 'admin')\n    Roles.userIsInRole(user, ['admin','editor'])\n    Roles.userIsInRole(userId, 'admin')\n    Roles.userIsInRole(userId, ['admin','editor'])\n\n    // partition roles (global roles are still checked)\n    Roles.userIsInRole(user, 'admin', 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], {partition: 'group1'})"
            ],
            "itemtype": "method",
            "name": "userIsInRole",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles to check against. If array,\n                            will return `true` if user is in _any_ role.\n                            Roles do not have to exist.",
                    "type": "String|Array"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition; if supplied, limits check to just that partition;\n    the user's global roles will always be checked whether partition is specified or not\n  - `anyPartition`: if set, role can be in any partition (`partition` option is ignored)\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "`true` if user is in _any_ of the target roles",
                "type": "Boolean"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 810,
            "description": "Retrieve user's roles.",
            "itemtype": "method",
            "name": "getRolesForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of partition to provide roles for; if not specified, global roles are returned\n  - `anyPartition`: if set, role can be in any partition (`partition` option is ignored)\n  - `fullObjects`: return full roles objects (`true`) or just names (`false`) (default `false`)\n  - `onlyAssigned`: return only assigned roles and not automatically inferred (like subroles)\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's roles, unsorted.",
                "type": "Array"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 866,
            "description": "Retrieve cursor of all existing roles.",
            "itemtype": "method",
            "name": "getAllRoles",
            "params": [
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `Meteor.roles.find(query, options)`.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of existing roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 881,
            "description": "Retrieve all users who are in target role.\n\nOptions:",
            "itemtype": "method",
            "name": "getUsersInRole",
            "params": [
                {
                    "name": "roles",
                    "description": "Name of role or an array of roles. If array, users\n                            returned will have at least one of the roles\n                            specified but need not have _all_ roles.\n                            Roles do not have to exist.",
                    "type": "String|Array"
                },
                {
                    "name": "options",
                    "description": "Options:\n  - `partition`: name of the partition to restrict roles to; user's global\n    roles will also be checked\n  - `anyPartition`: if set, role can be in any partition (`partition` option is ignored)\n  - `queryOptions`: options which are passed directly\n    through to `Meteor.users.find(query, options)`\n\nAlternatively, it can be a partition name string.",
                    "type": "Object|String",
                    "optional": true
                },
                {
                    "name": "queryOptions",
                    "description": "Options which are passed directly\n                               through to `Meteor.users.find(query, options)`",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Cursor of users in roles.",
                "type": "Cursor"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 953,
            "description": "Deprecated. Use `getPartitionsForUser` instead.",
            "itemtype": "method",
            "name": "getGroupsForUser",
            "static": 1,
            "deprecated": true,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 969,
            "description": "Retrieve users partitions, if any.",
            "itemtype": "method",
            "name": "getPartitionsForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of roles to restrict partitions to.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's partitions, unsorted.",
                "type": "Array"
            },
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1001,
            "description": "Resolves the user ID into an actual user object with `roles` field,\nif it is not already.",
            "itemtype": "method",
            "name": "_resolveUser",
            "params": [
                {
                    "name": "user",
                    "description": "User ID or an actual user object.",
                    "type": "String|Object"
                },
                {
                    "name": "force",
                    "description": "Load a new user object even if it is already one.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "User object.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1027,
            "itemtype": "method",
            "name": "_roleMatcher",
            "params": [
                {
                    "name": "roleName",
                    "description": "A role name to match against.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A matcher function which accepts a role object and returns `true`\n                    if its name matches `roleName`.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1041,
            "itemtype": "method",
            "name": "_roleAndPartitionMatcher",
            "params": [
                {
                    "name": "roleName",
                    "description": "A role name to match against.",
                    "type": "String"
                },
                {
                    "name": "partition",
                    "description": "A partition to match against.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A matcher function which accepts a role object and returns `true`\n                    if its name matches `roleName`, and partition matches `partition`.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1058,
            "itemtype": "method",
            "name": "_partitionMatcher",
            "params": [
                {
                    "name": "partition",
                    "description": "A partition to match against.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A matcher function which accepts a role object and returns `true`\n                    if its partition matches `partition`.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1074,
            "itemtype": "method",
            "name": "_onlyAssignedMatcher",
            "return": {
                "description": "A matcher function which accepts a role object and returns `true`\n                    if the role is an assigned role.",
                "type": "Function"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1087,
            "description": "Throw an exception if `roleName` is an invalid role name.",
            "itemtype": "method",
            "name": "_checkRoleName",
            "params": [
                {
                    "name": "roleName",
                    "description": "A role name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1101,
            "description": "Throw an exception if `partitionName` is an invalid partition name.",
            "itemtype": "method",
            "name": "_checkRoleName",
            "params": [
                {
                    "name": "partitionName",
                    "description": "A partition name to match against.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 1117,
            "params": [
                {
                    "name": "string",
                    "description": "Input string.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Trimmed string.",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 27,
            "itemtype": "method",
            "name": "_isNewRole",
            "params": [
                {
                    "name": "role",
                    "description": "`Meteor.roles` document.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `true` if the `role` is in the new format.\n                  If it is ambiguous or it is not, returns `false`.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 40,
            "itemtype": "method",
            "name": "_isOldRole",
            "params": [
                {
                    "name": "role",
                    "description": "`Meteor.roles` document.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `true` if the `role` is in the old format.\n                  If it is ambiguous or it is not, returns `false`.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 53,
            "itemtype": "method",
            "name": "_isNewField",
            "params": [
                {
                    "name": "roles",
                    "description": "`Meteor.users` document `roles` field.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns `true` if the `roles` field is in the new format.\n                  If it is ambiguous or it is not, returns `false`.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 66,
            "itemtype": "method",
            "name": "_isOldField",
            "params": [
                {
                    "name": "roles",
                    "description": "`Meteor.users` document `roles` field.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns `true` if the `roles` field is in the old format.\n                  If it is ambiguous or it is not, returns `false`.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 79,
            "itemtype": "method",
            "name": "_convertToNewRole",
            "params": [
                {
                    "name": "oldRole",
                    "description": "`Meteor.roles` document.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Converted `role` to the new format.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 96,
            "itemtype": "method",
            "name": "_convertToOldRole",
            "params": [
                {
                    "name": "newRole",
                    "description": "`Meteor.roles` document.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Converted `role` to the old format.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 112,
            "itemtype": "method",
            "name": "_convertToNewField",
            "params": [
                {
                    "name": "oldRoles",
                    "description": "`Meteor.users` document `roles` field in the old format.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Converted `roles` to the new format.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 157,
            "itemtype": "method",
            "name": "_convertToOldField",
            "params": [
                {
                    "name": "newRoles",
                    "description": "`Meteor.users` document `roles` field in the new format.",
                    "type": "Array"
                },
                {
                    "name": "usingGroups",
                    "description": "Should we use groups or not.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Converted `roles` to the old format.",
                "type": "Array"
            },
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 206,
            "itemtype": "method",
            "name": "_defaultUpdateUser",
            "params": [
                {
                    "name": "user",
                    "description": "`Meteor.users` document.",
                    "type": "Object"
                },
                {
                    "name": "roles",
                    "description": "Value to which user's `roles` field should be set.",
                    "type": "Array|Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 224,
            "itemtype": "method",
            "name": "_defaultUpdateRole",
            "params": [
                {
                    "name": "oldRole",
                    "description": "Old `Meteor.roles` document.",
                    "type": "Object"
                },
                {
                    "name": "newRole",
                    "description": "New `Meteor.roles` document.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 237,
            "description": "Migrates `Meteor.users` and `Meteor.roles` to the new format.",
            "itemtype": "method",
            "name": "_forwardMigrate",
            "params": [
                {
                    "name": "updateUser",
                    "description": "Function which updates the user object. Default `_defaultUpdateUser`.",
                    "type": "Function"
                },
                {
                    "name": "updateRole",
                    "description": "Function which updates the role object. Default `_defaultUpdateRole`.",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 264,
            "description": "Migrates `Meteor.users` and `Meteor.roles` to the old format.\n\nWe assume that we are converting back a failed migration, so values can only be\nwhat were valid values in the old format. So no group names starting with `$` and\nno subroles.",
            "itemtype": "method",
            "name": "_backwardMigrate",
            "params": [
                {
                    "name": "updateUser",
                    "description": "Function which updates the user object. Default `_defaultUpdateUser`.",
                    "type": "Function"
                },
                {
                    "name": "updateRole",
                    "description": "Function which updates the role object. Default `_defaultUpdateRole`.",
                    "type": "Function"
                },
                {
                    "name": "usingGroups",
                    "description": "Should we use groups or not.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "Roles",
            "module": "Roles"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " roles/roles_common.js:1117"
        }
    ]
}